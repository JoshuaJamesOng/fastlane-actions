fastlane_version '1.111.0'

before_all do |lane, options|
  # Pull all tags from origin down
  sh('git fetch --tags')
end

desc "Creates a tag on Gitlab if it doesn't exist"
lane :gitlab_tag do |options|
  if !git_tag_exists(tag: "#{options[:tag]}")
    add_gitlab_tag(
        tag_name: "#{options[:tag]}",
        server_url: "#{options[:server_url]}",
        api_token: "#{options[:api_token]}",
        repository_id: "#{options[:repository_id]}",
        commit_hash: "#{options[:commit_hash]}"
    )
  else
    raise "Tag #{options[:tag]} already exists"
  end
end

desc "Creates a Gitlab release for a tag or updates it if it already exists"
lane :gitlab_release do |options|
  if !git_tag_exists(tag: "#{options[:tag]}")
    set_gitlab_release(
        server_url: "#{options[:server_url]}",
        api_token: "#{options[:api_token]}",
        repository_id: "#{options[:repository_id]}",
        tag_name: "#{options[:tag]}",
        description: "#{options[:changelog]}"
    )
  else
    raise "Tag #{options[:tag]} does not exist"
  end
end

desc "Gets the id of the next Jenkins job"
lane :get_jenkins_id do |options|
    response = get_jenkins_job(
        server_url: "#{options[:server_url]}",
        job_name: "#{options[:job_name]}",
        username: "#{options[:username]}",
        password: "#{options[:password]}",
    )

    if response[:status] == 200
      require 'json'
      json = JSON.parse(response[:body])
      json["nextBuildNumber"]
    else
      UI.user_error!("Request returned #{response[:status]}")
    end

end

desc "Attaches files to a single JIRA existing JIRA ticket"
lane :attach_files_to_jira_ticket do |options|

  UI.important("Attaching #{options[:files].size} files to #{options[:jira_ticket]}")

  jira_token = "#{options[:credentials][:username]}:#{options[:credentials][:password]}"

  for file in options[:files] do
    UI.important("Attaching file #{file}")

    response = add_jira_attachment(
        server_url: "#{options[:credentials][:url]}",
        api_token: jira_token,
        issue_key: "#{options[:jira_ticket]}",
        file: file,
        certificate: "#{options[:credentials][:certificate]}",
        certificate_pass: "#{options[:credentials][:certificate_pass]}"
    )

    if response[:status] == 200
      require 'json'
      json = JSON.parse(response[:body])
      json = json[0]
      UI.important("Uploaded attachment #{json['self']}")
    else
      UI.user_error!("Request returned #{response[:status]}")
    end
  end
end

